# developブランチへのPRで自動テストの実行とデプロイをしたいやつ
# [前提]
# salesforceの開発では開発者毎にsandbox or scratch org を用意して開発が行われているはず。
# よって、feature/hotfixブランチで開発されたものは開発者自身が自分の環境で最低限のテストが実施される。
# コードレビュー時にPRを出す場合は
name: auto deploy

on:
  pull_request:
    types: [opened, synchronize]
    branches: [ main ]
    paths:
        - 'force-app/**'
  workflow_dispatch:
 
jobs:
  # set up & cache  
  build:
    name: apex test
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node.js environment
        uses: actions/setup-node@v4.0.2
        with:
          node-version: '20'
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      # globalでインストールする必要があるためキャッシュを利用できない
      # 正確なインストール先のパスがわかればキャッシュ化できるのだが。。。。
      - name: 'install Salesforce CLI'
        run: |
          npm install @salesforce/cli --location=global
          nodeInstallPath=$(npm config get prefix)
          echo "$nodeInstallPath/bin" >> $GITHUB_PATH
          sf --version
      # 差分抽出用にdeltaをインストール
      - name: 'installing sfdx git delta'
        run: | 
          echo y | sfdx plugins:install sfdx-git-delta
          sfdx plugins
      # –generate-deltaフラグを使用して、追加または変更されたメタデータのみを含むforce-appフォルダーのコピーを生成
      - name: 'Create delta packages for new, modified or deleted metadata'
        # 対象PRとの差分を抽出
        run: |
           mkdir changed-sources
           sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/

      # sf org display -o [your devhub alias] --verboseの結果を保持したsecretsから取得
      - name: Get Login URL
        run: echo ${{ secrets.DEVHUB_SFDX_URL }} > ./DEVHUB_SFDX_URL.txt
      
      # Authenticate to org
      - name: 'Authenticate to Integration Org'
        run: sfdx auth:sfdxurl:store -f ./DEVHUB_SFDX_URL.txt -s -a DevHub_vxa
        #run: sf org login sfdx-url -f ./DEVHUB_SFDX_URL.txt -a DevHub_vxa -d

      # 差分デプロイを実行
      # テスト全実行しているので指定されてものだけにしたい
      - name: 'deploy delta'
        shell: bash
        run: |
          sfdx force:source:deploy -p changed-sources/force-app --checkonly --testlevel RunLocalTests --json > deploy_result.json

      - name: Cat JSON Response
        run: cat deploy_result.json
        
      - name: Parse JSON Response
        id: parse_json
        run: |
          cat deploy_result.json | jq '.result.id' > parsed_value.txt
          parsed_value=$(cat parsed_value.txt)
          echo "JOB_ID=$parsed_value" >> $GITHUB_ENV

      - name: Create record in Dry_Deploy__c
        run: |
          sfdx force:data:record:create -s Dry_Deploy__c -v "Job_Id__c=${{ env.JOB_ID }} PR_Number__c=${{ github.event.pull_request.number }}"
          
      # ここは外部のDB等に保存した方がいい
      # ここではartifactで管理するためにテキストで出力しておく
      - name: Use Parsed Value
        run: |
          echo ${{ env.JOB_ID }}
          # echo -e ${{ github.event.pull_request.number }} >> release_pull_request.txt
          # cat release_pull_request.txt
          # mkdir ${{ github.event.pull_request.number }}
          echo -e ${{ env.JOB_ID }} > jobid_${{ github.event.pull_request.number }}.txt
          cat jobid_${{ github.event.pull_request.number }}.txt

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: "release_${{ github.event.pull_request.number }}"
          path: jobid_${{ github.event.pull_request.number }}.txt
          overwrite: true

      - run: mkdir dowload
      
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: "release_${{ github.event.pull_request.number }}"
          path: dowload

      - name: show download file
        run: cat dowload/jobid_${{ github.event.pull_request.number }}.txt
      # Create a scratch org
      #- name: "Create scratch org"
      #  run: sf org create scratch -d -f config/project-scratch-def.json -a our-scratch-org --target-dev-hub DevHub_vxa --duration-days 1

